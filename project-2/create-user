#!/usr/bin/bash

# Test reading uid from /etc/passwd
# create_user
#	Creates a new user with a home dir, bash as their shell, and a primary group

# check for sudo/root
if [ $EUID != 0 ]; then
  echo "$0: Script requires root privileges"
  exit 1
fi

usage () {
	echo "Usage: $0 [-h|-s|-g|-f] USERNAME"
	echo "Options:"
	echo " -h			Display this help message"
	echo " -s			EXECUTABLE Specify a shell for the user"
	echo " -g			GROUP... Specify additional groups to add the user to. If it doesn't exist, it will be created"
	echo " -f			Copy /etc/skel into home directory even if it exists already"
}
check_name () { 
  # Checks if a given string is a valid name for a user or group. Returns 1 if the name doesn't meet the requirements
  # Technically usernames don't have to obey these restrictions (according the man page) but it seems like a good practice
  # Names may have the followign characters:
  #   upper and lowercase letters
  #   digits 
  #   underscores
  #   dashes
  # Group name must obey the following criteriai
  #   No fully numeric names
  #   . and .. not permitted
  #   dashes not at the beginning 
  #   $ only at the end
  #   Max length of 32 chars
  # NOTE: while characters like $ and - are allowed in certain scenarios, they must be escaped when passed as an argument
	#				Not esacping these characters will result in parsing errors.
	name=$1

	# Regex explainations
	#		[^A-Za-z0-9_\\$\\-]+	: match name if it contains a character not in this list (Alnum, $, _, -)
	#		^[0-9]+$							: match name if it is a number (contains >=1 digits and no other chars)
	#		^-										: match name if it starts with a dash
	#		\\$.+									:	match name if it contains a $ followed by another character ($ is not at end of name)
  declare -a regex_arr=("[^A-Za-z0-9_\\$\\-]+" "^[0-9]+$" "^-" "\\$.+")

	# using return instead of echo here because the function needs to end when it matches a condition
	
	# name length check
	# ${$<VARNAME>} gets the length of the variable
  if [[ ${#name} -gt 32 ]]; then
		echo "$0: Name must be 32 characters or less: $name"
		return 1
  fi

	# testing the name against regex
  for regex in ${regex_arr[@]}; do
    result=$(echo $name | grep -iE $regex)
		if [[ -n $result ]]; then
			echo "$0: Invalid name: $name"
			return 1
    fi
  done

  return 0
}

get_next_ID () { 	
	# Gets next available GID/UID from /etc/passwd and /etc/group
	file=$1
	echo "$(($(grep -Ev ":[0-9]{1,3}:|:6553[3-4]:" $file | cut -d ":" -f 3 | sort -gr | head -n 1)+1))"
}

# default options/behaivours
# default shell to give users
shell=/usr/bin/bash
force=false

# options
while getopts ":hs:g:f" opts; do
  case $opts in
    s)
			# Change what shell to give the user
      # This only checks if it's executable, doesn't check if it's a valid shell program
      if [[ -x $OPTARG ]]; then
        shell=$OPTARG
      elif [[ -n $OPTARG ]]; then
        echo "$0: $OPTARG is not an executable"
        exit 1
			else
				usage
				exit 1
      fi
      ;;
    g) # Adding Additional Groups
      # user provides groups as a string where each group is separated by spaces
      # ex. "group1 group2 wheel"
			
			if [[ -z $OPTARG ]];then
				usage
				exit 1
			fi

			declare -a aux_groups=$OPTARG
			for groupname in ${aux_groups[@]};do
				check_name $groupname
				if [[ $? -eq 1 ]];then
					exit 1
				fi
			done
			;;
		f)
			# copy /etc/skel to home dir when the dir already exists
			force=true
			;;
    *|h|help)
			usage
      exit 1
      ;;
  esac
done

# shift flags to get arguments
shift $(($OPTIND - 1))
username=$1
if [[ -z $username ]];then
	usage
	exit 1
fi

# checking if username meets standards and is available
check_name $username
if [[ $? -eq 1 ]];then
	exit 1

# check if name is taken
# matching the first field by wrapping the username in ^ (start of line) and : (delimiter of files)
elif [[ -n $(grep -E "^$username:" /etc/passwd) ]]; then
	echo "$0: Username has been taken: $username"
	exit 1
fi
uid=$(get_next_ID /etc/passwd)
# Check if UID is an available GID
# If not, get the next availalbe GID
if [[ -n $(grep $uid /etc/group) ]];then
	primary_gid=$(get_next_ID /etc/group)
else
  primary_gid=$uid
fi

# Adding user to /etc/passwd
# >> to append to file instead of overwrite
home_dir="/home/$username"
cat >> /etc/passwd <<- EOF
	$username:x:$uid:$primary_gid::$home_dir:$shell
EOF

# Adding primary group to /etc/group
# >> to append to file instead of overwrite
cat >> /etc/group <<- EOF
	$username:x:$primary_gid:
EOF

# Creating user's home dir
if [[ -d $home_dir ]];then
	# if the directory already exists, only copy /etc/skel into if -f was passed as an option
	echo $home_dir already exists.
	if [[ $force = false ]];then
		echo Not copying /etc/skel into directory.
	else
		echo Copying /etc/skel into direcotry.
		chmod 700 $home_dir
		cp -r /etc/skel/. $home_dir
		chown "$username:$username" $home_dir $home_dir/*
	fi
else
	echo "Creating $home_dir"
	mkdir $home_dir
	
	# make directory rwx by owner only
	# reference: I looked at the other home directories
	chmod 700 $home_dir
	cp -r /etc/skel/. $home_dir
	# transfer user and group ownership to new user and their primary group 
	chown "$username:$username" $home_dir $home_dir/*
fi



# Adding additional groups to /etc/group
# I heard from someone that you don't need to do this but I already made it
# Only if the instructions were more specific on the requirements
if [[ -n $group ]]; then
  for groupname in $groups[@]; do
		# Check if group exists
    group_search=$(grep -iE "^$groupname:" /etc/group)
    if [[ -n $group_search ]];then
			# Check if group has members
      current_members=$(echo $group_search | cut -d ":" -f 4)
			# sed explanation:
			#		first field is the input string
			#		2nd field (s) tells sed to subsitute something in the input
			#		3rd field is the target for subsitution
			#			$ represents the end of the string
			#		4th field is the string to subsitute with
			# reference: https://www.gnu.org/software/sed/manual/sed.html#sed-script-overview
			# & https://www.gnu.org/software/sed/manual/sed.html#sed-commands-summary
      if [[ -n current_members ]]; then
        sed "/$group_search/s/$/$current_members,$username/" /etc/group
      else
        sed "/$group_search/s/$/$username/" /etc/group
      fi
    else
      aux_GID=$(get_next_ID /etc/group)
      cat >> /etc/group <<- EOF
				$groupname:x:$aux_GID:
			EOF
    fi
  done
fi
